<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[obsidian_docs_local]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>obsidian_docs_local</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 22 May 2024 15:33:12 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 22 May 2024 15:33:12 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[RaspiCameraLivestream]]></title><description><![CDATA[ 
 <br><br><br><br><br><br>Open your terminal and type:<br>sudo python -m pip install rpistream
Copy<br><br>Open cmd as admin and type:<br>pip install rpistream
Copy<br><br><br><br>Server<br>from rpistream.camera import Camera
from rpistream.streamserver import Server
import cv2

def retrieveImage(cam,imgResize):
    image = cv2.resize(cam.image,(0,0),fx=imgResize,fy=imgResize)
    return image

cam = Camera(mirror=True)
scale=0.5
server = Server(port=5000)
server.serve() # Blocking; waits for a connection before continuing
server.startStream(retrieveImage,[cam,scale]) # Calls retrieveImage(*args) every frame  
Copy<br>Client<br>from rpistream.streamclient import Client
import cv2

client = Client(serverIp="localhost", port = 5000) # Connects to the server
client.startStream() # Starts recieving data and displaying the video
Copy<br><br><br>
<br>numpy
<br>zstandard
<br>openCv-python
]]></description><link>personal-projects\rpistream.html</link><guid isPermaLink="false">Personal Projects/RPiStream.md</guid><pubDate>Wed, 22 May 2024 04:38:38 GMT</pubDate></item><item><title><![CDATA[RustyDigitalPitchFollower]]></title><description><![CDATA[ 
 <br><br>Rust app to convert an audio stream into a midi stream to trigger external synthesizers.<br><br>Run cargo build --release followed by target\\release\\pitch2synth-rs.exe to build and run an optimized executable<br><br><br>
<br>Audio aquisition thread

<br>Managed by CPAL(Cross Platform Audio Library) via callback
<br>Communicates via Bus to transmit audio to pitch estimation and UI threads


<br>Pitch estimation thread

<br>Computes Constant-Q transform via Goertzel algorithm
<br>Takes argmax of frequency ampltiudes
<br>Accounts by harmonic errors
<br>Communicates via Bus to transmit frequency data to MIDI and UI threads


<br>MIDI handler thread

<br>Takes pitch data and sends corresponding MIDI note to external synthesizer via USB


<br>UI Thread

<br>Takes audio waveform from audio thread and frequency data from pitch thread and renders GUI


<br><img alt="GUI" src="personal-projects\ui_example.png">]]></description><link>personal-projects\rustydigitalpitchfollower.html</link><guid isPermaLink="false">Personal Projects/RustyDigitalPitchFollower.md</guid><pubDate>Wed, 22 May 2024 04:44:14 GMT</pubDate><enclosure url="personal-projects\ui_example.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="personal-projects\ui_example.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>